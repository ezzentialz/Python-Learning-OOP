# OOP - Object oriented program
#‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£ OOP ‡∏Ñ‡∏∑‡∏≠ ‚Äú‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ ‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á (Object) ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏£‡∏∞‡πÄ‡∏≠‡∏Å‚Äù

#‡∏ó‡∏∏‡∏Å‡∏™‡∏¥‡πà‡∏á‡πÉ‡∏ô‡πÇ‡∏•‡∏Å‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡πá‡∏ô ‚Äúobject‚Äù ‡πÑ‡∏î‡πâ
#‡πÄ‡∏ä‡πà‡∏ô ‚Äú‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‚Äù ‚Üí ‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠, ‡∏≠‡∏≤‡∏¢‡∏∏, ‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ ‚Äú‡∏û‡∏π‡∏î‚Äù, ‚Äú‡∏Å‡∏¥‡∏ô‡∏Ç‡∏ô‡∏°‚Äù, ‚Äú‡∏ô‡∏≠‡∏ô‚Äù ‡πÑ‡∏î‡πâ = ‡πÄ‡∏õ‡πá‡∏ô Object üéí

#| Function style          | OOP style                             |
#| ----------------------- | ------------------------------------- |
#| ‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô              | ‡πÉ‡∏ä‡πâ **class** ‡∏™‡∏£‡πâ‡∏≤‡∏á object               |
#| ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ï‡∏ô            | ‡∏ó‡∏∏‡∏Å object ‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏°‡∏±‡∏ô‡πÄ‡∏≠‡∏á            |
#| ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÅ‡∏¢‡∏Å ‡πÜ ‡∏Å‡∏£‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢    | ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• + ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏ß‡πâ‡πÉ‡∏ô class ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß      |

'''‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏£‡∏Å

class Student:
    def __init__(self, name, age):  <<<# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏ä‡∏±‡πà‡∏ô _init_(‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ:self ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤>>, name, age)  
    ***‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° _init_ ‡∏Ñ‡∏∑‡∏≠‡∏ü‡∏±‡∏á‡∏ä‡∏±‡πà‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á object/self ‡∏Ñ‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô‡∏Ç‡∏≠‡∏á object ‡∏ô‡∏±‡πâ‡∏ô‡πÜ
    
        self.name = name  <<<# ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ self + (.name) = name  ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠
        self.age = age   <<<# ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ self  + (.age) = age ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏≠‡∏≤‡∏¢‡∏∏

    def introduce(self):   <<<# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏ä‡∏±‡πà‡∏ô introduce(  ‡∏Ñ‡πà‡∏≤ self):
        return f"My name is {self.name}. I'm {self.age} years old."  <<<# ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£ print" my name is {self.name}. i'm {self.age} ‡∏ö‡∏•‡∏≤‡πÜ‡πÜ

# ‡∏™‡∏£‡πâ‡∏≤‡∏á object
s1 = Student("Ezz", 21)  ##### ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏îclass ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡πá‡πÄ‡∏≠‡∏≤‡∏°‡∏≤‡πÉ‡∏™‡πà ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ s1 ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà object ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
print(s1.introduce()) ### *** ‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏∏‡∏ß‡πà‡∏≤‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á print ‡πÉ‡∏´‡πâ print: object introduce() ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ s1 

'''

# OOP ‡∏°‡∏µ 4 ‡πÄ‡∏™‡∏≤ ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏π‡πâ
# Encapsulation    - ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏¢‡πÉ‡∏ô object ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏°‡∏≤‡πÅ‡∏Å‡∏∞‡∏°‡∏±‡πà‡∏ß‡πÜ ‡πÄ‡∏£‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ú‡πà‡∏≤‡∏ô method ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
# Inheritance      - ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡∏ö‡∏ó‡∏≠‡∏îclass ‡∏´‡∏£‡∏∑‡∏≠ ‡πÄ‡∏≠‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å class ‡πÄ‡∏Å‡πà‡∏≤‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
# Polymorphism     - ‡∏Ñ‡∏∑‡∏≠ method ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏° object
# Abstraction      - ‡∏Ñ‡∏∑‡∏≠ ‡∏ã‡πà‡∏≠‡∏ô ‚Äú‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥‚Äù ‡πÑ‡∏ß‡πâ ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà ‚Äú‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‚Äù


# *** Encapsulation - ‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏¢‡πÉ‡∏ô object ***
# ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á class BankAccount ‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô
'''
‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡πÅ‡∏£‡∏Å ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ Encapsulation
'''
#class BankAccount:
#    def __init__(self):
#        self.balance = 100

#acc = BankAccount()
#acc.balance = -9999  # ‡πÇ‡∏≠‡πâ‡∏¢‡∏¢‡∏¢ ‡πÇ‡∏î‡∏ô‡πÅ‡∏Æ‡∏Å!
#print(acc.balance)

#‡πÉ‡∏Ñ‡∏£‡∏Å‡πá‡πÅ‡∏Å‡πâ balance ‡πÑ‡∏î‡πâ = ‡πÑ‡∏°‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÄ‡∏•‡∏¢ üò±


'''
‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á ‡πÉ‡∏ä‡πâ Encapsulation
'''
#class BankAccount:
#   def __init__(self):
#        self.__balance = 100  # üîí ‡πÉ‡∏™‡πà __ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ã‡πà‡∏≠‡∏ô

#    def deposit(self, amount):
#        self.__balance += amount

#    def get_balance(self):
#        return self.__balance

#acc = BankAccount()
#acc.deposit(50)  # ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô
#print(acc.get_balance())  # ‚úÖ ‡∏î‡∏π‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô = 150

'''
‡πÅ‡∏•‡πâ‡∏ß __balance ‡∏°‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?
‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà __ (2 ‡∏Ç‡∏µ‡∏î) ‡∏Ñ‡∏∑‡∏≠‡∏ó‡∏≥‡πÉ‡∏´‡πâ ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ô‡∏µ‡πâ private

‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏£‡∏á ‡πÜ ‡πÑ‡∏î‡πâ ‡∏ï‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô method ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ ‡πÄ‡∏ä‡πà‡∏ô .get_balance()
'''

#‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡πÄ‡∏™‡∏≤‡πÅ‡∏£‡∏Å: Encapsulation
#‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏à‡∏£‡∏¥‡∏á	‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß
#‡∏ö‡∏±‡∏ï‡∏£ ATM	.deposit(), .get_balance()
#‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á	self.__balance

#  ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î ‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà 1: ‡∏™‡∏£‡πâ‡∏≤‡∏á class Counter
#‡∏à‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á class ‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤ Counter
#‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ __count ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 0
#‡∏°‡∏µ method:

#increment() ‚Üí ‡∏ö‡∏ß‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡∏•‡∏∞ 1

#get_count() ‚Üí ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡∏°‡∏≤

class Counter():
    def __init__(self): 
        self.__count = 0
    
    def increment(self):
        self.__count += 1
        
    def get_count(self):
        return self.__count
    
c = Counter()
c.increment()
c.increment()
print(c.get_count())   



#‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á class PasswordVault
#‡∏™‡∏£‡πâ‡∏≤‡∏á class PasswordVault ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (private)
#‡∏°‡∏µ method:

#set_password(pw) ‚Üí ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏´‡∏±‡∏™

#check(pw) ‚Üí ‡∏ñ‡πâ‡∏≤ pw ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏î‡∏¥‡∏° ‡πÉ‡∏´‡πâ return "Access Granted"

# ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
#vault = PasswordVault()
#vault.set_password("secret123")
#print(vault.check("wrong"))     # Expected: None
#print(vault.check("secret123")) # Expected: Access Granted


class PasswordVault():
    def __init__(self):
        self.__password = ""
        
    def set_password(self, pw):
        self.__password = pw
        
    def check(self, pw):
        if pw == self.__password:
            return "Access Granted"
        
vault = PasswordVault()
vault.set_password("secret123")

print(vault.check("wrong"))
print(vault.check("secret123"))




#‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà 3: ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡∏ñ‡∏≠‡∏ô
#‡∏õ‡∏£‡∏±‡∏ö BankAccount ‡πÉ‡∏´‡πâ‡∏°‡∏µ:

#withdraw(amount) ‚Üí ‡∏ñ‡πâ‡∏≤‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏û‡∏≠ ‡πÉ‡∏´‡πâ‡∏ñ‡∏≠‡∏ô, ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÉ‡∏´‡πâ return ‚ÄúInsufficient funds‚Äù

# ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
#acc = BankAccount()
#acc.deposit(100)
#print(acc.withdraw(50))  # OK
#print(acc.withdraw(100)) # Expected: Insufficient funds

class BankAccount():
    def __init__(self):
        self.__balance = 0
        
    def deposit(self, amount):
        self.__balance += amount
        
    def withdraw(self, amount):
        if amount > self.__balance:
            return "Insufficient funds"
        else:
            self.__balance -= amount
            return f"Withdraw {amount}" 
        
    def get_balance(self):
        return self.__balance
    
acc = BankAccount()
acc.deposit(100)

print(acc.withdraw(50))  
print(acc.withdraw(200)) 





#‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà 1: SecretNote
#‡∏à‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á class SecretNote
#‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ private __note

#write_note(text) ‚Üí ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°

#read_note() ‚Üí ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤

#‡∏ñ‡πâ‡∏≤‡πÇ‡∏ô‡πâ‡∏ï‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ return "No note yet"

class SecretNote():
    def __init__(self):
        self.__note = ""
        
    def write_note(self, text):
        self.__note = text
        
    def read_note(self, text):
        if text == self.__note:
            return (f"yes we have note: {self.__note}")
        else:
            return "No note yet"
sn = SecretNote()
sn.write_note("hi")

print(sn.read_note("python"))
print(sn.read_note("hi"))

sn.write_note("ok")
print(sn.read_note("ok"))

#‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà 2: TemperatureSensor
#class ‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ (private: __temp)

#set_temp(value) ‚Üí ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤ temp

#get_temp() ‚Üí ‡∏ñ‡πâ‡∏≤ temp > 40 ‡πÉ‡∏´‡πâ return "Warning: Overheat!"
#‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô ‡πÉ‡∏´‡πâ return ‡∏Ñ‡πà‡∏≤ temp ‡∏õ‡∏Å‡∏ï‡∏¥
class TemperatureSensor:
    def __init__(self):
        self.__temp = 0
        
    def set_temp(self, value):
        self.__temp = value
        
    def get_temp(self, value):
        if value > 40:
            return (f"Warning: Overheat!")
        else:
            return f"Temperature: {self.__temp}"
ts = TemperatureSensor()
ts.set_temp(30)

print(ts.get_temp(45))
print(ts.get_temp(1))

#‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà 3: ScoreManager
#class ‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô

#add(score) ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ (‡∏™‡∏∞‡∏™‡∏°)

#get_score() ‚Üí return ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°

#‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏Å‡πâ __score ‡∏ï‡∏£‡∏á ‡πÜ ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö

#üí° Hint: ‡∏ã‡πà‡∏≠‡∏ô __score ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡πà‡∏≤‡∏ô method ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô


class ScoreManager():
    def __init__(self):
        self.__score = 0
    
    def add_score(self, score):
        self.__score += score
    
    def get_score(self):
        return self.__score

    
sm = ScoreManager()
sm.add_score(100)

print(sm.get_score())



#### ***** ‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏ö‡πà‡∏≠‡∏¢‡πÜ‡∏Ñ‡∏∑‡∏≠ TypeError: ................    takes 1 positional argument but 2 were given
#### ‡πÅ‡∏õ‡∏•‡∏ß‡πà‡∏≤ def (‡∏ä‡∏∑‡πà‡∏≠object(parameter)) <<<<< ‡∏ï‡∏£‡∏á parameter ‡∏ô‡∏µ‡πâ‡∏ô‡πà‡∏∞ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡πÅ‡∏Ñ‡πà self ‡∏Ñ‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡πÅ‡∏Ñ‡πà‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏≠‡∏∑‡πà‡∏ô ‡∏à‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô error ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÄ‡∏ä‡πà‡∏ô
### ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤ def name(self)   #‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤ ‡∏ï‡∏£‡∏á self = Jirath
### ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏≤‡∏•‡∏≠‡∏á print(name(self))  #‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô ‡∏Ñ‡∏∑‡∏≠ Jirath
### ‡πÅ‡∏ï‡πà‡∏´‡∏≤‡∏Å‡∏ó‡∏∞‡∏•‡∏∂‡πà‡∏á ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô print(name(‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ)) # error ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤ self ‡∏Ñ‡∏∑‡∏≠ Jirath ‡πÅ‡∏ï‡πà‡∏´‡∏≤‡∏Å‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡∏≠‡∏∑‡πà‡∏ô ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏Ñ‡∏∑‡∏≠‡∏û‡∏±‡∏á