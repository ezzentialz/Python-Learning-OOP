#üîÆ Polymorphism ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£? (‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏∂‡πâ‡∏ô)
#Polymorphism ‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏©‡∏≤‡∏Å‡∏£‡∏µ‡∏Å ‡πÅ‡∏õ‡∏•‡∏ß‡πà‡∏≤ "‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö" (Poly = ‡∏´‡∏•‡∏≤‡∏¢, Morph = ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö)

#‡πÉ‡∏ô‡∏ó‡∏≤‡∏á OOP ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á:

#"‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ï‡πà‡∏≤‡∏á‡∏ä‡∏ô‡∏¥‡∏î‡∏Å‡∏±‡∏ô (‡πÅ‡∏ï‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏≤‡∏™‡πÅ‡∏°‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ interface ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô) ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏ï‡πà‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏õ"

#‡∏ô‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏•‡πà‡∏ô" (Play) ‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏ä‡∏ô‡∏¥‡∏î‡∏Å‡∏±‡∏ô:

#‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏•‡πà‡∏ô" ‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á ‡∏Å‡πá‡∏Ñ‡∏∑‡∏≠ "‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á"
#‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏•‡πà‡∏ô" ‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ ‡∏Å‡πá‡∏Ñ‡∏∑‡∏≠ "‡πÄ‡∏•‡πà‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠"
#‡∏ñ‡∏∂‡∏á‡πÅ‡∏°‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏•‡πà‡∏ô" ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô ‡πÅ‡∏ï‡πà‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô ‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏ô‡∏±‡πâ‡∏ô ‡πÜ ‡∏Ñ‡∏£‡∏±‡∏ö

#‡πÉ‡∏ô Python, Polymorphism ‡∏°‡∏±‡∏Å‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏î‡πâ 2 ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å ‡πÜ:

#Method Overriding: (‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏≠‡∏™‡∏ó‡∏≥‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß!) ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡∏≤‡∏™‡∏•‡∏π‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô method ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡∏Ñ‡∏•‡∏≤‡∏™‡πÅ‡∏°‡πà ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ method ‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏≤‡∏Å object ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏•‡∏≤‡∏™‡∏•‡∏π‡∏Å ‡∏°‡∏±‡∏ô‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å method ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏•‡∏≤‡∏™‡∏•‡∏π‡∏Å‡πÅ‡∏ó‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏•‡∏≤‡∏™‡πÅ‡∏°‡πà

#‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: Animal ‡∏°‡∏µ speak(), Dog ‡πÅ‡∏•‡∏∞ Cat override speak() ‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô
#Polymorphism with Functions and Collections: ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Å‡πá‡∏ö object ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏≤‡∏™‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô (‡πÅ‡∏ï‡πà‡∏°‡∏µ method ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô) ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô collection ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô (‡πÄ‡∏ä‡πà‡∏ô list) ‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å method ‡∏ô‡∏±‡πâ‡∏ô ‡πÜ ‡∏ú‡πà‡∏≤‡∏ô loop ‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏≤‡∏ö‡∏£‡∏∑‡πà‡∏ô ‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡πà‡∏•‡∏∞ object ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏±‡∏ô override ‡πÑ‡∏ß‡πâ

#‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: animals = [Cat(), Dog(), Cat(), Dog()] 
# ‡πÅ‡∏•‡πâ‡∏ß for a in animals: print(a.speak()) 
# ‡πÅ‡∏ï‡πà‡∏•‡∏∞ object ‡∏à‡∏∞ speak() ‡πÉ‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
'''
‡πÇ‡∏à‡∏ó‡∏¢‡πå: Class Employee ‚Üí Manager, Developer
‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏Ñ‡∏£‡∏±‡∏ö

Class Employee (‡∏Ñ‡∏•‡∏≤‡∏™‡πÅ‡∏°‡πà):

‡∏°‡∏µ __init__(self, name): ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
‡∏°‡∏µ method perform_duty(self): ‡πÉ‡∏´‡πâ return f"{self.name} is performing general duties."
Class Manager (‡∏Ñ‡∏•‡∏≤‡∏™‡∏•‡∏π‡∏Å):

‡∏™‡∏∑‡∏ö‡∏ó‡∏≠‡∏î‡∏à‡∏≤‡∏Å Employee
‡∏°‡∏µ __init__(self, name, department): ‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÅ‡∏ú‡∏ô‡∏Å
‡πÉ‡∏ä‡πâ super().__init__(name) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏Ñ‡∏•‡∏≤‡∏™‡πÅ‡∏°‡πà
‡πÄ‡∏Å‡πá‡∏ö self.department = department
Override method perform_duty(self): ‡πÉ‡∏´‡πâ return f"{self.name} is managing the {self.department} department."
Class Developer (‡∏Ñ‡∏•‡∏≤‡∏™‡∏•‡∏π‡∏Å):

‡∏™‡∏∑‡∏ö‡∏ó‡∏≠‡∏î‡∏à‡∏≤‡∏Å Employee
‡∏°‡∏µ __init__(self, name, language): ‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç
‡πÉ‡∏ä‡πâ super().__init__(name) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏Ñ‡∏•‡∏≤‡∏™‡πÅ‡∏°‡πà
‡πÄ‡∏Å‡πá‡∏ö self.language = language
Override method perform_duty(self): ‡πÉ‡∏´‡πâ return f"{self.name} is coding in {self.language}."
‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Polymorphism (‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å object ‡πÉ‡∏ô list):

‡∏™‡∏£‡πâ‡∏≤‡∏á object manager = Manager("Alice", "HR")
‡∏™‡∏£‡πâ‡∏≤‡∏á object developer = Developer("Bob", "Python")
‡∏™‡∏£‡πâ‡∏≤‡∏á employees = [manager, developer]
‡πÉ‡∏ä‡πâ for loop ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ú‡πà‡∏≤‡∏ô employees ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å perform_duty() ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
'''

class Employee():               #‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏•‡∏≤‡∏™ ‡πÅ‡∏°‡πà()
    def __init__(self, name):   # ‡∏™‡∏£‡πâ‡∏≤‡∏á init ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ name ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô self
        self.name = name        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î self.name ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ name
    def perform_duty(self):     # ‡∏™‡∏£‡πâ‡∏≤‡∏á perform_duty('self')
        return f"{self.name} is performing general duties."   #‡πÅ‡∏•‡πâ‡∏ß ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ print ‡∏ä‡∏∑‡πà‡∏≠ + str
    
class Manager(Employee):                   #‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏•‡∏≤‡∏™‡∏•‡∏π‡∏Å(‡∏Ñ‡∏•‡∏≤‡∏™‡πÅ‡∏°‡πà)
    def __init__(self, name, department):  # ‡∏™‡∏£‡πâ‡∏≤‡∏á init ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ name ‡πÅ‡∏•‡∏∞ department ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô self‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏•‡∏≤‡∏™‡∏•‡∏π‡∏ÅManager
        super().__init__(name)             # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡πÉ‡∏´‡πâ name ‡πÑ‡∏õ‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô ‡∏Ñ‡∏•‡∏≤‡∏™‡πÅ‡∏°‡πà[super().__init__()]
        self.department = department       # ‡∏™‡∏£‡πâ‡∏≤‡∏á ‡πÅ‡∏•‡∏∞ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î self.department ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ department ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™‡∏•‡∏π‡∏Å‡πÄ‡∏≠‡∏á
    def perform_duty(self):                # ‡∏™‡∏£‡πâ‡∏≤‡∏á perform_duty(self) ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠ override ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ñ‡∏•‡∏≤‡∏™‡πÅ‡∏°‡πà
        return f"{self.name} is managing the {self.department} department."  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ override ‡πÉ‡∏´‡πâ print ‡∏ä‡∏∑‡πà‡∏≠ +str + department 

class Developer(Employee):                  # ‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö ‡∏Ç‡πâ‡∏≠‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÄ‡∏•‡∏¢ ‡πÅ‡∏Ñ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á ‡∏Ñ‡∏•‡∏≤‡∏™‡∏•‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏≠‡∏µ‡∏Å 1 ‡∏≠‡∏±‡∏ô ‡πÄ‡∏â‡∏¢‡πÜ
    def __init__(self, name, language):
        super().__init__(name)
        self.language = language
    def perform_duty(self):
        return f"{self.name} is coding in {self.language}."
    
manager = Manager("Alice", "HR")                # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î manager ‡∏Ñ‡∏∑‡∏≠ ‡∏Ñ‡∏•‡∏≤‡∏™ Manager("__", "__")  ‡πÇ‡∏î‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏° ‡∏ä‡∏∑‡πà‡∏≠ ‡πÅ‡∏•‡∏∞ ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
developer = Developer("Bob", "Python")          # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î developer ‡∏Ñ‡∏∑‡∏≠ ‡∏Ñ‡∏•‡∏≤‡∏™ Developer('__'). '__') ‡πÇ‡∏î‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏° ‡∏ä‡∏∑‡πà‡∏≠ ‡πÅ‡∏•‡∏∞ ‡∏†‡∏≤‡∏©‡∏≤
employees = [manager, developer]                # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î employees ‡πÇ‡∏î‡∏¢ ‡πÉ‡∏´‡πâ manager ‡πÅ‡∏•‡∏∞ developer ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô list

for e in employees: print(e.perform_duty())     # ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡∏à‡∏∞‡πÉ‡∏ä‡πâ loop ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡πâ ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô perform_duty ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏•‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£ override ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á