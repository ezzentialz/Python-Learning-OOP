#‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà 1: SecureBox
#‡∏à‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á class SecureBox
#‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ __item (‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô None)
#method:
#.store(item) ‚Üí ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏Å‡∏•‡πà‡∏≠‡∏á
#.retrieve() ‚Üí ‡∏î‡∏∂‡∏á‡∏Ç‡∏≠‡∏á‡∏≠‡∏≠‡∏Å‡∏°‡∏≤ (‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÉ‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á)
#‡∏ñ‡πâ‡∏≤‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á ‡πÉ‡∏´‡πâ return "Box is empty"

class SecureBox():
    def __init__(self):
        self.__item = None
        
    def store_item(self, items):
        self.__item = items
        
    def store_retrieve(self, items):
        if self.__item is None:
            return "Box is empty"
        else:
            items = self.__item
            self.__item = None  # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÉ‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á
            return f"Here is your: {items}"
sb = SecureBox()
sb.store_item("paper")

print(sb.store_retrieve("paper"))
print(sb.store_retrieve("pencil"))


#üî∏ ‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà 2: QuizScore
#‡∏™‡∏£‡πâ‡∏≤‡∏á class QuizScore ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡πâ‡∏≠
#‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ __scores ‡πÄ‡∏õ‡πá‡∏ô list
#method:\n
#.add(score) ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡πâ‡∏≠
#.average() ‚Üí ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
#‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏•‡∏¢ ‡πÉ‡∏´‡πâ return "No score yet"

class QuizScore():
    def __init__(self):
        self.__scores = []
    
    def add_score(self, score):
        self.__scores.append(score)
    
    def average_score(self):
        if not self.__scores:
            return f"No Score yet"
        else:
            avg = sum(self.__scores) / len(self.__scores)
            return f" you average score is {avg}"
        
qs = QuizScore()
qs.add_score(100)
qs.add_score(90)
qs.add_score(50)

print(qs.average_score())



#üî∏ ‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà 3: UserLogin
#‡∏à‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á class UserLogin
#‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ __username, __password
#method:
#.set_credentials(username, password)
#.login(username, password) ‚Üí ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
#‡∏ñ‡πâ‡∏≤‡∏ï‡∏£‡∏á ‚Üí return "Login successful"
#‡∏ñ‡πâ‡∏≤‡∏ú‡∏¥‡∏î ‚Üí return "Invalid credentials"


class UserLogin():
    def __init__(self):
        self.__username = ''
        self.__password = ''
    
    def set_credentials(self,username, password):
        self.__username = username
        self.__password = password
        
    def login(self, username, password):
        if username == self.__username and password == self.__password:
            return "Login successful"   
        else:
            return "Invalid credentials"
ul = UserLogin()
ul.set_credentials('ed',1234)

print(ul.login('ed',1234))
print(ul.login('admin',1234))





# Class: WaterBottle
#‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ç‡∏ß‡∏î‡∏ô‡πâ‡∏≥‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà‡∏ô‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡∏π‡πÑ‡∏î‡πâ
#üì¶ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥:
#‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ __water (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô 0)
#method:
#.fill(amount) ‚Üí ‡πÄ‡∏ï‡∏¥‡∏°‡∏ô‡πâ‡∏≥ (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà)
#.check() ‚Üí ‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏ô‡πâ‡∏≥‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏µ‡πà ml

class WaterBottle():
    def __init__(self):
        self.__water = 0
    
    def fill_bottle(self, amount):
        self.__water += amount
        
    def check_bottle(self):
        return self.__water
    
wb = WaterBottle()
wb.fill_bottle(100)
print(wb.check_bottle())

wb.fill_bottle(154)
print(wb.check_bottle())

#Class: SnackBox
#‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ __snacks ‡πÄ‡∏õ‡πá‡∏ô list (‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á)
#method:
#.add_snack(snack) ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏°‡∏•‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á
#.take_snack() ‚Üí ‡∏´‡∏¢‡∏¥‡∏ö‡∏Ç‡∏ô‡∏°‡∏ä‡∏¥‡πâ‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏≠‡∏≠‡∏Å (‡πÅ‡∏ö‡∏ö LIFO)
#‡∏ñ‡πâ‡∏≤‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á ‡πÉ‡∏´‡πâ return "No snack left!"

class SnackBox():
    def __init__(self):
        self.__snacks = []
        
    def add(self, snack):
        self.__snacks.append(snack)
        return self.__snacks
        
    def take(self, snack):
        if not self.__snacks:
            return "No snack left!"
        else:
            self.__snacks.remove(snack)
            return (f"here is your: {snack}")
        
        
    def remain(self):
        return self.__snacks
        
sb = SnackBox()
sb.add("Lay")
sb.add("Coke")


print(sb.remain())
print(sb.take("Lay"))
print(sb.remain())